{"version":3,"sources":["static/img/avatar.svg","static/img/logo.svg","serviceWorker.ts","layout/PageToolbar.tsx","layout/Header.tsx","layout/PageNav.tsx","layout/Sidebar.tsx","layout/Page.tsx","config.ts","components/application/UpdateApplication.tsx","components/application/ApplicationList.tsx","components/application/AddApplication.tsx","components/application/ApplicationIndex.tsx","index.tsx","App.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","useState","isDropdownOpen","setDropdownOpen","isKebabDropdownOpen","setKebabDropdownOpen","kebabDropdownItems","DropdownItem","userDropdownItems","key","component","isDisabled","Toolbar","ToolbarGroup","className","css","accessibleStyles","screenReader","visibleOnLg","ToolbarItem","Button","id","aria-label","variant","ButtonVariant","plain","hiddenOnLg","spacingStyles","mr_0","Dropdown","isPlain","position","toggle","KebabToggle","onToggle","isOpen","console","log","dropdownItems","visibleOnMd","DropdownToggle","PageHeader","logo","Brand","src","Logo","alt","width","toolbar","PageToolbar","avatar","Avatar","UserAvatar","showNavToggle","activeItem","setActiveItem","Nav","onSelect","result","itemId","theme","NavList","NavVariants","simple","NavItem","isActive","to","PageSidebar","nav","PageNav","props","title","subTitle","children","Page","header","sidebar","Sidebar","isManagedSidebar","mainContainerId","PageSection","PageSectionVariants","light","TextContent","Text","config","apiHost","siteHost","application","setApplication","isFileChange","setFileChange","isUploading","setUploading","handleFileChange","event","currentTarget","files","upload","onSubmit","data","FormData","append","name","path","ref","fetch","method","body","then","res","text","onCancel","size","TextVariants","h6","onClick","onChange","type","aria-describedby","htmlFor","columns","rows","setRows","fetchList","useCallback","json","appList","map","item","cells","href","target","rel","substring","UpdateApplication","useEffect","refresh","setInterval","clearInterval","Table","withRouter","history","form","setForm","handleChange","value","Card","CardBody","Form","FormGroup","label","isRequired","fieldId","helperText","TextInput","placeholder","InputGroup","InputGroupText","required","ActionGroup","push","goBack","render","exact","AddApplication","ApplicationIndex","ApplicationList","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.420876ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.a56b0f14.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.f866dbab.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownSeparator,\n  KebabToggle,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from \"@patternfly/react-core\";\nimport { BellIcon, CogIcon } from \"@patternfly/react-icons\";\nimport { css } from \"@patternfly/react-styles\";\nimport accessibleStyles from \"@patternfly/react-styles/css/utilities/Accessibility/accessibility\";\nimport spacingStyles from \"@patternfly/react-styles/css/utilities/Spacing/spacing\";\n\nexport default () => {\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [isKebabDropdownOpen, setKebabDropdownOpen] = useState(false);\n\n  function onDropdownToggle(isOpen: boolean) {\n    setDropdownOpen(isOpen);\n  }\n\n  function onKebabDropdownToggle(isOpen: boolean) {\n    console.log('hello')\n    setKebabDropdownOpen(isOpen);\n  }\n\n  const kebabDropdownItems = [\n    <DropdownItem>\n      <BellIcon /> Notifications\n    </DropdownItem>,\n    <DropdownItem>\n      <CogIcon /> Settings\n    </DropdownItem>\n  ];\n  const userDropdownItems = [\n    <DropdownItem key=\"link-1\">Link</DropdownItem>,\n    <DropdownItem key=\"link-2\" component=\"button\">Action</DropdownItem>,\n    <DropdownItem key=\"link-3\" isDisabled>Disabled Link</DropdownItem>,\n    <DropdownItem key=\"link-4\" isDisabled component=\"button\">\n      Disabled Action\n    </DropdownItem>,\n    <DropdownSeparator key=\"link-separator\"/>,\n    <DropdownItem key=\"link-5\">Separated Link</DropdownItem>,\n    <DropdownItem key=\"link-6\" component=\"button\">Separated Action</DropdownItem>\n  ];\n\n  return (\n    <Toolbar>\n      <ToolbarGroup\n        className={css(\n          accessibleStyles.screenReader,\n          accessibleStyles.visibleOnLg\n        )}\n      >\n        <ToolbarItem>\n          <Button\n            id=\"simple-example-uid-01\"\n            aria-label=\"Notifications actions\"\n            variant={ButtonVariant.plain}\n          >\n            <BellIcon />\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Button\n            id=\"simple-example-uid-02\"\n            aria-label=\"Settings actions\"\n            variant={ButtonVariant.plain}\n          >\n            <CogIcon />\n          </Button>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarGroup>\n        <ToolbarItem\n          className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}\n        >\n          <Dropdown\n            isPlain\n            position=\"right\"\n            toggle={<KebabToggle onToggle={onKebabDropdownToggle} />}\n            isOpen={isKebabDropdownOpen}\n            dropdownItems={kebabDropdownItems}\n          />\n        </ToolbarItem>\n        <ToolbarItem\n          className={css(\n            accessibleStyles.screenReader,\n            accessibleStyles.visibleOnMd\n          )}\n        >\n          <Dropdown\n            isPlain\n            position=\"right\"\n            isOpen={isDropdownOpen}\n            toggle={\n              <DropdownToggle onToggle={onDropdownToggle}>\n                Kun Yan\n              </DropdownToggle>\n            }\n            dropdownItems={userDropdownItems}\n          />\n        </ToolbarItem>\n      </ToolbarGroup>\n    </Toolbar>\n  );\n};\n","import React from 'react';\nimport { Avatar, Brand, PageHeader } from '@patternfly/react-core';\nimport PageToolbar from './PageToolbar';\nimport UserAvatar from '../static/img/avatar.svg';\nimport Logo from '../static/img/logo.svg';\n\nexport default () => {\n  return (\n    <PageHeader\n      logo={<Brand src={Logo} alt=\"SPAship Logo\" width=\"55%\"/>}\n      toolbar={<PageToolbar />}\n      avatar={<Avatar src={UserAvatar} alt=\"Avatar image\" />}\n      showNavToggle\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\n\nexport default () => {\n  const [activeItem, setActiveItem] = useState(1);\n  function onNavSelect(result: {\n    groupId: number | string;\n    itemId: number | string;\n    to: string;\n    event: React.FormEvent<HTMLInputElement>;\n  }) {\n    setActiveItem(result.itemId as number);\n  }\n  return (\n    <Nav onSelect={onNavSelect} aria-label=\"Nav\" theme=\"dark\">\n      <NavList variant={NavVariants.simple}>\n        <NavItem itemId={0} isActive={activeItem === 0}>\n          Dashboard\n        </NavItem>\n        <NavItem itemId={1} isActive={activeItem === 1}>\n          <Link to={`/applications`}>Application List</Link>\n        </NavItem>\n        <NavItem itemId={2} isActive={activeItem === 2}>\n          Authentication\n        </NavItem>\n        <NavItem itemId={3} isActive={activeItem === 3}>\n          Network Services\n        </NavItem>\n        <NavItem itemId={4} isActive={activeItem === 4}>\n          Server\n        </NavItem>\n      </NavList>\n    </Nav>\n  );\n};\n","import React from \"react\";\nimport { PageSidebar } from \"@patternfly/react-core\";\nimport PageNav from \"./PageNav\";\n\nexport default () => {\n  return <PageSidebar nav={<PageNav/>} theme=\"dark\"/>;\n};\n","import React, { ReactNode } from 'react';\nimport {\n  Page,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent\n} from '@patternfly/react-core';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\n\ninterface IProps {\n  title: string;\n  subTitle?: ReactNode | string;\n  children: ReactNode | string;\n}\n\nexport default (props: IProps) => {\n  const { title, subTitle, children } = props;\n  return (\n    <Page\n      header={<Header />}\n      sidebar={<Sidebar />}\n      isManagedSidebar\n      // skipToContent={PageSkipToContent}\n      mainContainerId=\"main-content-page-layout-simple-nav\"\n    >\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component=\"h1\">{title}</Text>\n        </TextContent>\n      </PageSection>\n\n      {subTitle && (\n        <PageSection variant={PageSectionVariants.light}>\n          {subTitle}\n        </PageSection>\n      )}\n      <PageSection>{children}</PageSection>\n    </Page>\n  );\n};\n","const config = {\n  apiHost: 'http://spaship.usersys.redhat.com:8008',\n  siteHost: 'http://spaship.usersys.redhat.com'\n}\n\nexport default config;\n","import React, { useState } from 'react';\nimport { IApplication } from '../../models/Application';\nimport { Button, Text, TextVariants } from '@patternfly/react-core';\nimport config from '../../config';\nimport { Spinner } from '@patternfly/react-core/dist/js/experimental';\n\ninterface IProps {\n  application: IApplication;\n}\nexport default (props: IProps) => {\n  const [application, setApplication] = useState(props.application);\n  const [isFileChange, setFileChange] = useState(false);\n  const [isUploading, setUploading] = useState(false);\n\n  function handleFileChange(event: React.FormEvent<HTMLInputElement>) {\n    if (!event.currentTarget.files || !event.currentTarget.files[0]) {\n      return;\n    }\n    setApplication({\n      ...application,\n      upload: event.currentTarget.files[0]\n    });\n    setFileChange(true);\n  }\n\n  function onSubmit() {\n    setUploading(true);\n    const data = new FormData();\n    data.append('name', application.name);\n    data.append('path', application.path);\n    data.append('ref', application.ref);\n    data.append('upload', application.upload);\n\n    fetch(`${config.apiHost}/deploy`, {\n      method: 'POST',\n      body: data\n    })\n      .then(res => res.text())\n      .then(text => {\n        console.log(text);\n        setUploading(false);\n        setFileChange(false);\n      });\n  }\n  function onCancel() {\n    setFileChange(false);\n  }\n  function renderNoFile() {\n    return (\n      <>\n        <input\n          onChange={handleFileChange}\n          type=\"file\"\n          id={`upload-${application.name}`}\n          aria-describedby=\"upload-helper\"\n        />\n        <Button\n          component=\"label\"\n          variant=\"secondary\"\n          htmlFor={`upload-${application.name}`}\n        >\n          Deploy New File\n        </Button>\n      </>\n    );\n  }\n\n  function renderFileUpdated() {\n    return (\n      <>\n        <Text component={TextVariants.h6}>\n          {(application.upload as File).name}\n        </Text>\n        <Button onClick={onSubmit} variant=\"primary\">\n          Submit\n        </Button>\n        <Button onClick={onCancel} variant=\"secondary\">\n          Cancel\n        </Button>\n      </>\n    );\n  }\n\n  if (isUploading) {\n    return <Spinner size=\"md\"/>;\n  }\n\n  return isFileChange ? renderFileUpdated() : renderNoFile();\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport map from 'lodash/map';\nimport { Button } from '@patternfly/react-core';\nimport { IRow, Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport Page from '../../layout/Page';\nimport config from '../../config';\nimport UpdateApplication from './UpdateApplication';\n\ninterface IApp {\n  name?: string;\n  path: string;\n  ref?: string;\n}\nexport default () => {\n  const [columns] = useState([\n    { title: 'Name' },\n    { title: 'Path' },\n    { title: 'Ref' },\n    { title: 'Actions' }\n  ]);\n\n  const [rows, setRows] = useState<IRow[]>([]);\n\n  const fetchList = useCallback(() => {\n    console.log('start to fetch');\n    fetch(`${config.apiHost}/list`)\n      .then(res => res.json())\n      .then(appList => {\n        setRows(\n          map(appList, item => ({\n            cells: [\n              item.name,\n              item.path && {\n                title: (\n                  <a\n                    href={config.siteHost + item.path}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {item.path}\n                  </a>\n                )\n              },\n              item.ref && {\n                title: <a href={`#${item.ref}`}>{item.ref.substring(0, 6)}</a>\n              },\n              {\n                title: <UpdateApplication application={item}/>\n              }\n            ]\n          }))\n        );\n      });\n  }, []);\n\n  useEffect(() => {\n    fetchList();\n    const refresh = setInterval(fetchList, 5000);\n    return () => clearInterval(refresh);\n  }, [fetchList]);\n\n  return (\n    <Page\n      title=\"Application List\"\n      subTitle={\n        <Link to={`/applications/new`}>\n          <Button variant=\"primary\">New Application</Button>\n        </Link>\n      }\n    >\n      <Table cells={columns} rows={rows} aria-label=\"Application List\">\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Page>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Card,\n  CardBody\n} from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/js/experimental';\nimport { withRouter } from 'react-router';\nimport { IApplication } from '../../models/Application';\nimport Page from '../../layout/Page';\nimport config from '../../config';\n\nexport default withRouter(({ history }) => {\n  const [form, setForm] = useState<IApplication>({\n    name: '',\n    path: '',\n    ref: '',\n    upload: ''\n  });\n  const [isUploading, setUploading] = useState(false);\n\n  function handleChange(\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) {\n    setForm({\n      ...form,\n      [event.currentTarget.name]: value\n    });\n  }\n\n  function handleFileChange(event: React.FormEvent<HTMLInputElement>) {\n    const upload =\n      (event.currentTarget.files && event.currentTarget.files[0]) || '';\n    setForm({\n      ...form,\n      upload\n    });\n  }\n\n  function onSubmit() {\n    setUploading(true);\n    console.log(form);\n    const data = new FormData();\n    data.append('name', form.name);\n    data.append('path', form.path);\n    data.append('ref', form.ref);\n    data.append('upload', form.upload);\n\n    fetch(`${config.apiHost}/deploy`, {\n      method: 'POST',\n      body: data\n    })\n      .then(res => res.text())\n      .then(text => {\n        console.log(text);\n        setUploading(false);\n        history.push('/applications');\n      });\n  }\n\n  function onCancel() {\n    history.goBack();\n  }\n\n  return (\n    <Page title=\"Upload to deploy\">\n      <Card>\n        <CardBody>\n          <Form>\n            <FormGroup\n              label=\"Name\"\n              isRequired\n              fieldId=\"name\"\n              helperText=\"Please provide app name\"\n            >\n              <TextInput\n                isRequired\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                aria-describedby=\"name-helper\"\n                placeholder=\"Name\"\n                value={form.name}\n                onChange={handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label=\"Path\"\n              isRequired\n              fieldId=\"path\"\n              helperText=\"Please provide app path\"\n            >\n              <InputGroup>\n                <InputGroupText id=\"site-host\">\n                  {config.siteHost}\n                </InputGroupText>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"path\"\n                  name=\"path\"\n                  placeholder=\"/path-name\"\n                  aria-describedby=\"path-helper\"\n                  value={form.path}\n                  onChange={handleChange}\n                />\n              </InputGroup>\n            </FormGroup>\n\n            <FormGroup\n              label=\"Git Ref\"\n              isRequired\n              fieldId=\"ref\"\n              helperText=\"Please provide Git Ref\"\n            >\n              <TextInput\n                isRequired\n                type=\"text\"\n                id=\"ref\"\n                name=\"ref\"\n                placeholder=\"Tag or Branch\"\n                aria-describedby=\"ref-helper\"\n                value={form.ref}\n                onChange={handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label=\"File\"\n              isRequired\n              fieldId=\"upload\"\n              helperText=\"Supports uploading of .tar,.tar.bz2,.tar.gz, and.zip.\"\n            >\n              <input\n                onChange={handleFileChange}\n                required\n                type=\"file\"\n                id=\"upload\"\n                name=\"upload\"\n                placeholder=\"Supports uploading of .tar,.tar.bz2,.tar.gz, and.zip.\"\n                aria-describedby=\"upload-helper\"\n              />\n              <div><Button\n                component=\"label\"\n                variant=\"tertiary\"\n                htmlFor={`upload`}\n              >Choose File</Button></div>\n            </FormGroup>\n\n            <ActionGroup>\n              <Button\n                variant=\"primary\"\n                onClick={onSubmit}\n                isDisabled={isUploading}\n              >\n                {isUploading && (\n                  <>\n                    <Spinner size=\"md\" />\n                    <span> </span>\n                  </>\n                )}\n                Submit\n              </Button>\n              <Button variant=\"secondary\" onClick={onCancel}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </Form>\n        </CardBody>\n      </Card>\n    </Page>\n  );\n});\n","import React from 'react';\n\nexport default () => {\n  return (\n    <div>Application index</div>\n  )\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport './static/css/root.css';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport ApplicationList from './components/application/ApplicationList';\nimport AddApplication from './components/application/AddApplication';\nimport ApplicationIndex from './components/application/ApplicationIndex';\nexport default () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Redirect exact path=\"/\" to=\"/applications\" />\n        <Route path=\"/applications/new\" component={AddApplication} />\n        <Route\n          path=\"/applications/:applicationName\"\n          component={ApplicationIndex}\n        />\n        <Route path=\"/applications\" component={ApplicationList} />\n      </Switch>\n    </HashRouter>\n  );\n};\n"],"sourceRoot":""}